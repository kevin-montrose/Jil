using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Jil
{
   /// <summary>
   /// Configuration options for Jil serialization, passed to the JSON.Serialize method.
   /// </summary>
   public sealed class Options
   {
#pragma warning disable 1591
      // Start OptionsGeneration.linq generated content
      public static readonly Options Default = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch);
      public static readonly Options PrettyPrint = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true);
      public static readonly Options ExcludeNulls = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true);
      public static readonly Options JSONP = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true);
      public static readonly Options IncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true);
      public static readonly Options Utc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options CamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options DontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNulls = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true);
      public static readonly Options PrettyPrintJSONP = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true);
      public static readonly Options PrettyPrintIncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true);
      public static readonly Options PrettyPrintUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true);
      public static readonly Options ExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true);
      public static readonly Options ExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true);
      public static readonly Options JSONPUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options JSONPCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options JSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options IncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options IncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options IncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options UtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options UtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options CamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true);
      public static readonly Options PrettyPrintExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true);
      public static readonly Options PrettyPrintExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true);
      public static readonly Options PrettyPrintJSONPUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintJSONPCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options ExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options JSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options JSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options JSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options IncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options IncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options IncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options UtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options JSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options IncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options JSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601 = new Options(dateFormat: DateTimeFormat.ISO8601);
      public static readonly Options ISO8601PrettyPrint = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true);
      public static readonly Options ISO8601ExcludeNulls = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true);
      public static readonly Options ISO8601JSONP = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true);
      public static readonly Options ISO8601IncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true);
      public static readonly Options ISO8601Utc = new Options(dateFormat: DateTimeFormat.ISO8601, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601CamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601DontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNulls = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true);
      public static readonly Options ISO8601PrettyPrintJSONP = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true);
      public static readonly Options ISO8601PrettyPrintIncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true);
      public static readonly Options ISO8601PrettyPrintUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true);
      public static readonly Options ISO8601ExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true);
      public static readonly Options ISO8601ExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601ExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true);
      public static readonly Options ISO8601JSONPUtc = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601JSONPCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601JSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601IncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601IncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601IncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601UtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601UtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601CamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true);
      public static readonly Options ISO8601PrettyPrintJSONPUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintJSONPCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options ISO8601ExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601ExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601ExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601JSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601JSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601JSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601IncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601IncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601IncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601UtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601JSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601IncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601JSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601ExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.ISO8601, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpoch = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrint = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNulls = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONP = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNulls = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONP = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochJSONPCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.MillisecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123 = new Options(dateFormat: DateTimeFormat.RFC1123);
      public static readonly Options RFC1123PrettyPrint = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true);
      public static readonly Options RFC1123ExcludeNulls = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true);
      public static readonly Options RFC1123JSONP = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true);
      public static readonly Options RFC1123IncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true);
      public static readonly Options RFC1123Utc = new Options(dateFormat: DateTimeFormat.RFC1123, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123CamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123DontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNulls = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true);
      public static readonly Options RFC1123PrettyPrintJSONP = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true);
      public static readonly Options RFC1123PrettyPrintIncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true);
      public static readonly Options RFC1123PrettyPrintUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true);
      public static readonly Options RFC1123ExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true);
      public static readonly Options RFC1123ExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123ExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true);
      public static readonly Options RFC1123JSONPUtc = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123JSONPCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123JSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123IncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123IncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123IncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123UtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123UtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123CamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true);
      public static readonly Options RFC1123PrettyPrintJSONPUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintJSONPCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options RFC1123ExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123ExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123ExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123JSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123JSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123JSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123IncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123IncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123IncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123UtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123JSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123IncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123JSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123ExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.RFC1123, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpoch = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch);
      public static readonly Options SecondsSinceUnixEpochPrettyPrint = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNulls = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true);
      public static readonly Options SecondsSinceUnixEpochJSONP = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true);
      public static readonly Options SecondsSinceUnixEpochIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNulls = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONP = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochJSONPUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochJSONPCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONP = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInherited = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtc = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      public static readonly Options SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCaseDontCoerceToDateOnSerialize = new Options(dateFormat: DateTimeFormat.SecondsSinceUnixEpoch, prettyPrint: true, excludeNulls: true, jsonp: true, includeInherited: true, unspecifiedDateTimeKindBehavior: UnspecifiedDateTimeKindBehavior.IsUTC, serializationNameFormat: SerializationNameFormat.CamelCase, dontCoerceToDateOnSerialize: true);
      // End OptionsGeneration.linq generated content
#pragma warning restore 1591

      internal bool ShouldPrettyPrint { get; private set; }
      internal bool ShouldExcludeNulls { get; private set; }
      internal DateTimeFormat UseDateTimeFormat { get; private set; }
      internal bool IsJSONP { get; private set; }
      internal bool ShouldIncludeInherited { get; private set; }
      internal UnspecifiedDateTimeKindBehavior UseUnspecifiedDateTimeKindBehavior { get; private set; }
      internal SerializationNameFormat SerializationNameFormat { get; private set; }
      internal bool ShouldNotCoerceToDateOnSerialize { get; private set; }

      /// <summary>
      /// For compatibility with earlier Jil versions.
      ///
      /// Configuration for Jil serialization options.
      ///
      /// Available options:
      ///   prettyPrint - whether or not to include whitespace and newlines for ease of reading
      ///   excludeNulls - whether or not to write object members whose value is null
      ///   jsonp - whether or not the serialized json should be valid for use with JSONP
      ///   dateFormat - the style in which to serialize DateTimes and TimeSpans
      ///   includeInherited - whether or not to serialize members declared by an objects base types
      ///   unspecifiedDateTimeKindBehavior - how to treat DateTime's with a DateTimeKind of Unspecified (Jil converts all DateTimes to Utc for serialization, use DateTimeOffset to preserve time zone information)
      ///   dontCoerceToDateOnSerialize - don't coerce dynamic types or strings to dates when serializing
      /// </summary>
      public Options(bool prettyPrint, bool excludeNulls, bool jsonp, DateTimeFormat dateFormat, bool includeInherited, UnspecifiedDateTimeKindBehavior unspecifiedDateTimeKindBehavior, bool dontCoerceToDateOnSerialize) :
          this(prettyPrint, excludeNulls, jsonp, dateFormat, includeInherited, unspecifiedDateTimeKindBehavior, dontCoerceToDateOnSerialize, SerializationNameFormat.Verbatim)
      { }

      /// <summary>
      /// Configuration for Jil serialization options.
      ///
      /// Available options:
      ///   prettyPrint - whether or not to include whitespace and newlines for ease of reading
      ///   excludeNulls - whether or not to write object members whose value is null
      ///   jsonp - whether or not the serialized json should be valid for use with JSONP
      ///   dateFormat - the style in which to serialize DateTimes and TimeSpans
      ///   includeInherited - whether or not to serialize members declared by an objects base types
      ///   unspecifiedDateTimeKindBehavior - how to treat DateTime's with a DateTimeKind of Unspecified (Jil converts all DateTimes to Utc for serialization, use DateTimeOffset to preserve time zone information)
      ///   dontCoerceToDateOnSerialize - don't coerce dynamic types or strings to dates when serializing
      ///   serializationNameFormat - how to serialize names of properties/objects unless specified explicitly by an attribute
      /// </summary>
      public Options(bool prettyPrint = false, bool excludeNulls = false, bool jsonp = false, DateTimeFormat dateFormat = DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch, bool includeInherited = false, UnspecifiedDateTimeKindBehavior unspecifiedDateTimeKindBehavior = UnspecifiedDateTimeKindBehavior.IsLocal, bool dontCoerceToDateOnSerialize = false, SerializationNameFormat serializationNameFormat = SerializationNameFormat.Verbatim)
      {
         ShouldPrettyPrint = prettyPrint;
         ShouldExcludeNulls = excludeNulls;
         IsJSONP = jsonp;

#pragma warning disable 618
         // upgrade from the obsolete DateTimeFormat enumeration; warning disabled to allow it, but all other references
         //  should be expunged
         if (dateFormat == DateTimeFormat.NewtonsoftStyleMillisecondsSinceUnixEpoch)
         {
            dateFormat = DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch;
         }
#pragma warning restore 618

         UseDateTimeFormat = dateFormat;
         ShouldIncludeInherited = includeInherited;
         UseUnspecifiedDateTimeKindBehavior = unspecifiedDateTimeKindBehavior;
         ShouldNotCoerceToDateOnSerialize = dontCoerceToDateOnSerialize;
         SerializationNameFormat = serializationNameFormat;
      }

      /// <summary>
      /// Returns a string representation of this Options object.
      ///
      /// The format of this may change at any time, it is only meant for debugging.
      /// </summary>
      public override string ToString()
      {
         return
             string.Format(
                 "{{ ShouldPrettyPrint = {0}, ShouldExcludeNulls = {1}, UseDateTimeFormat = {2}, IsJSONP = {3}, ShouldIncludeInherited = {4}, UseUnspecifiedDateTimeKindBehavior = {5}, ShouldNotCoerceToDateOnSerialize = {6}, SerializationNameFormat = {7} }}",
                 ShouldPrettyPrint,
                 ShouldExcludeNulls,
                 UseDateTimeFormat,
                 IsJSONP,
                 ShouldIncludeInherited,
                 UseUnspecifiedDateTimeKindBehavior,
                 ShouldNotCoerceToDateOnSerialize,
                 SerializationNameFormat
             );
      }

      /// <summary>
      /// Returns a code that uniquely identifies this set of Options.
      /// </summary>
      public override int GetHashCode()
      {
         const int isoMask = 0x20;
         const int milliMask = isoMask * 2;
         const int microsoftMask = milliMask * 2;
         const int secondsMask = microsoftMask * 2;
         const int rfc1123Mask = secondsMask * 2;
         const int localMask = rfc1123Mask * 2;
         const int utcMask = localMask * 2;
         const int verbatimMask = utcMask * 2;
         const int camelCaseMask = verbatimMask * 2;

         int dateTimeMask;
         switch (UseDateTimeFormat)
         {
            case DateTimeFormat.ISO8601: dateTimeMask = isoMask; break;
            case DateTimeFormat.MillisecondsSinceUnixEpoch: dateTimeMask = milliMask; break;

            case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch: dateTimeMask = microsoftMask; break;

            case DateTimeFormat.SecondsSinceUnixEpoch: dateTimeMask = secondsMask; break;
            case DateTimeFormat.RFC1123: dateTimeMask = rfc1123Mask; break;
            default: throw new Exception("Unexpected DateTimeFormat " + UseDateTimeFormat);
         }

         int unspecifiedMask;
         switch (UseUnspecifiedDateTimeKindBehavior)
         {
            case UnspecifiedDateTimeKindBehavior.IsLocal: unspecifiedMask = localMask; break;
            case UnspecifiedDateTimeKindBehavior.IsUTC: unspecifiedMask = utcMask; break;
            default: throw new Exception("Unexpected UnspecifiedDateTimeKindBehavior " + UseUnspecifiedDateTimeKindBehavior);
         }

         int serializationNameMask;
         switch (SerializationNameFormat)
         {
            case SerializationNameFormat.Verbatim: serializationNameMask = verbatimMask; break;
            case SerializationNameFormat.CamelCase: serializationNameMask = camelCaseMask; break;
            default: throw new Exception("Unexpected SerializationNameFormat " + SerializationNameFormat);
         }

         return
             (ShouldPrettyPrint ? 0x1 : 0x0) |
             (ShouldExcludeNulls ? 0x2 : 0x0) |
             (IsJSONP ? 0x4 : 0x0) |
             (ShouldIncludeInherited ? 0x8 : 0x0) |
             (ShouldNotCoerceToDateOnSerialize ? 0x10 : 0x0) |
             dateTimeMask |
             serializationNameMask |
             unspecifiedMask;
      }

      /// <summary>
      /// Returns true if two Options are equal, and false otherwise
      /// </summary>
      public override bool Equals(object obj)
      {
         var other = obj as Options;
         if (other == null) return false;

         return
             other.UseDateTimeFormat == this.UseDateTimeFormat &&
             other.ShouldPrettyPrint == this.ShouldPrettyPrint &&
             other.ShouldExcludeNulls == this.ShouldExcludeNulls &&
             other.IsJSONP == this.IsJSONP &&
             other.ShouldIncludeInherited == this.ShouldIncludeInherited &&
             other.UseUnspecifiedDateTimeKindBehavior == this.UseUnspecifiedDateTimeKindBehavior &&
             other.ShouldNotCoerceToDateOnSerialize == this.ShouldNotCoerceToDateOnSerialize &&
             other.SerializationNameFormat == this.SerializationNameFormat;
      }
   }
}